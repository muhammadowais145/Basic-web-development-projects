<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drawing App</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: #e9ecef;
            margin: 0;
            padding: 20px;
            height: 100vh;
        }
        h1 {
            color: #343a40;
        }
        canvas {
            border: 1px solid #343a40;
            background-color: #ffffff;
            margin-bottom: 10px;
            cursor: crosshair;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        #controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 20px;
        }
        button {
            margin: 5px;
            padding: 10px 15px;
            font-size: 14px;
            border: none;
            border-radius: 5px;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
        }
        button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }
        button:active {
            transform: scale(0.95);
        }
        input[type="color"],
        input[type="number"],
        input[type="text"] {
            margin: 5px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        input[type="number"] {
            width: 70px;
        }
        input[type="text"] {
            width: 200px;
        }
        .control-group {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

<h1>Drawing App</h1>
<div id="controls">
    <div class="control-group">
        <button id="clearBtn">Clear Canvas</button>
        <button id="undoBtn">Undo</button>
        <button id="redoBtn">Redo</button>
    </div>
    <div class="control-group">
        <button id="saveBtn">Save Drawing</button>
        <button id="eraserBtn">Eraser</button>
        <button id="gradientBtn">Apply Gradient</button>
    </div>
    <div class="control-group">
        <button id="mirrorBtn">Mirror</button>
        <input type="color" id="colorPicker" value="#000000">
    </div>
    <div class="control-group">
        <input type="number" id="canvasWidth" placeholder="Width" value="800">
        <input type="number" id="canvasHeight" placeholder="Height" value="600">
        <button id="resizeBtn">Resize Canvas</button>
    </div>
    <div class="control-group">
        <input type="text" id="textInput" placeholder="Enter text">
        <button id="addTextBtn">Add Text</button>
        <button id="editTextBtn">Edit Text</button>
    </div>
</div>

<canvas id="canvas" width="800" height="600"></canvas>

<script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    let isDrawing = false;
    let paths = [];
    let undonePaths = [];
    let erasing = false;
    let gradient = null;
    let textArray = [];
    let selectedTextIndex = null;

    // Drawing functionality
    canvas.addEventListener('mousedown', (e) => {
        isDrawing = true;
        ctx.beginPath();
        ctx.moveTo(e.offsetX, e.offsetY);
    });

    canvas.addEventListener('mousemove', (e) => {
        if (isDrawing) {
            ctx.lineTo(e.offsetX, e.offsetY);
            ctx.stroke();
        }
    });

    canvas.addEventListener('mouseup', () => {
        isDrawing = false;
        ctx.closePath();
        paths.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        undonePaths = [];
    });

    // Clear canvas functionality
    document.getElementById('clearBtn').addEventListener('click', () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        paths = [];
        undonePaths = [];
    });

    // Undo functionality
    document.getElementById('undoBtn').addEventListener('click', () => {
        if (paths.length > 0) {
            undonePaths.push(paths.pop());
            redraw();
        }
    });

    // Redo functionality
    document.getElementById('redoBtn').addEventListener('click', () => {
        if (undonePaths.length > 0) {
            paths.push(undonePaths.pop());
            redraw();
        }
    });

    // Save drawing functionality
    document.getElementById('saveBtn').addEventListener('click', () => {
        const link = document.createElement('a');
        link.download = 'drawing.png';
        link.href = canvas.toDataURL();
        link.click();
    });

    // Eraser functionality
    document.getElementById('eraserBtn').addEventListener('click', () => {
        erasing = !erasing;
        ctx.strokeStyle = erasing ? '#ffffff' : document.getElementById('colorPicker').value; // White color for eraser
        document.getElementById('eraserBtn').textContent = erasing ? 'Pencil' : 'Eraser';
    });

    // Gradient functionality
    document.getElementById('gradientBtn').addEventListener('click', () => {
        const gradientColor1 = prompt("Enter the first color for the gradient (e.g., '#FF0000')") || '#FF0000';
        const gradientColor2 = prompt("Enter the second color for the gradient (e.g., '#0000FF')") || '#0000FF';
        gradient = ctx.createLinearGradient(0, 0, canvas.width, 0); // Horizontal gradient
        gradient.addColorStop(0, gradientColor1);
        gradient.addColorStop(1, gradientColor2);
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height); // Fill canvas with gradient
        paths.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        undonePaths = [];
    });

    // Mirror functionality
    document.getElementById('mirrorBtn').addEventListener('click', () => {
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        tempCtx.putImageData(imageData, 0, 0);
        ctx.save();
        ctx.scale(-1, 1);
        ctx.drawImage(tempCanvas, -canvas.width, 0); // Draw mirrored image
        ctx.restore();
        paths.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        undonePaths = [];
    });

    // Resize canvas functionality
    document.getElementById('resizeBtn').addEventListener('click', () => {
        const newWidth = parseInt(document.getElementById('canvasWidth').value);
        const newHeight = parseInt(document.getElementById('canvasHeight').value);
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        tempCtx.drawImage(canvas, 0, 0);
        canvas.width = newWidth;
        canvas.height = newHeight;
        ctx.drawImage(tempCanvas, 0, 0);
    });

    // Add text functionality
    document.getElementById('addTextBtn').addEventListener('click', () => {
        const text = document.getElementById('textInput').value;
        const x = 100; // Default x position
        const y = 100; // Default y position
        const color = document.getElementById('colorPicker').value;
        const size = 20; // Default font size
        textArray.push({ text, x, y, color, size });
        redraw();
        document.getElementById('textInput').value = ''; // Clear the input field
    });

    // Edit text functionality
    document.getElementById('editTextBtn').addEventListener('click', () => {
        if (selectedTextIndex !== null) {
            const newText = document.getElementById('textInput').value;
            textArray[selectedTextIndex].text = newText;
            redraw();
            document.getElementById('textInput').value = ''; // Clear the input field
            selectedTextIndex = null; // Reset selection
        }
    });

    // Function to redraw the entire canvas
    function redraw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Redraw paths
        for (let i = 0; i < paths.length; i++) {
            ctx.putImageData(paths[i], 0, 0);
        }
        // Draw text
        for (let i = 0; i < textArray.length; i++) {
            const textObj = textArray[i];
            ctx.fillStyle = textObj.color;
            ctx.font = `${textObj.size}px Arial`;
            ctx.fillText(textObj.text, textObj.x, textObj.y);
            ctx.strokeStyle = 'black'; // Border color for selected text
            ctx.strokeText(textObj.text, textObj.x, textObj.y);
        }
    }
</script>

</body>
</html>
